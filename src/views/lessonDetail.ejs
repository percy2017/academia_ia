<div class="container-fluid">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/courses/dashboard">Cursos</a></li>
      <li class="breadcrumb-item"><a href="/courses/<%= lesson.course.id %>"><%= lesson.course.title %></a></li>
      <li class="breadcrumb-item active" aria-current="page"><%= lesson.title %></li>
    </ol>
  </nav>

  <div class="row mb-3">
    <div class="col-md-12">
      <div class="accordion" id="chatAccordion">
        <div class="accordion-item">
          <div class="accordion-header d-flex justify-content-between align-items-center p-2">
            <h2 class="mb-0 flex-grow-1">
              <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseChat" aria-expanded="false" aria-controls="collapseChat">
                <i class="bi bi-robot me-2"></i>Chat con el Asistente IA
              </button>
            </h2>
            <button type="button" id="chat-fullscreen-btn" class="btn btn-sm btn-light ms-2">
              <i id="chat-fullscreen-icon" class="bi bi-fullscreen"></i>
            </button>
          </div>
          <div id="collapseChat" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#chatAccordion">
            <div class="accordion-body">
              <div id="lesson-chat-container"
                  data-course-id="<%= lesson.course.id %>"
                  data-lesson-id="<%= lesson.id %>"
                  <% if (typeof user !== 'undefined' && user) { %>
                  data-user-id="<%= user.id %>"
                  <% } else { %>
                  data-user-id=""
                  <% } %>
                  data-chat-api-base-url="/api/chat"
                  <% if (typeof csrfToken !== 'undefined') { %>
                  data-csrf-token="<%= csrfToken %>"
                  <% } else { %>
                  data-csrf-token=""
                  <% } %>
              >
                <!-- Área de Mensajes -->
                <div id="chat-messages-area" class="mb-3" style="height: 600px; overflow-y: auto;">
                    <p class="text-muted text-center" id="chat-empty-message">El historial de chat aparecerá aquí.</p>
                </div>
            
                <!-- Previsualización de Archivo (opcional) -->
                <div id="chat-file-preview-area" class="mb-2" style="display: none;">
                    <small>Archivo adjunto:</small>
                    <span id="chat-file-preview-name" class="fw-bold"></span>
                    <button type="button" id="chat-remove-file-button" class="btn btn-sm btn-outline-danger ms-2 py-0 px-1">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
      
                <!-- Área de Composición de Mensaje -->
                <form id="chat-form" class="d-flex gap-2 align-items-center">
                    <textarea id="chat-input-text" class="form-control" rows="1" placeholder="Escribe tu pregunta o mensaje..."></textarea>
                    
                    <input type="file" id="chat-input-file" accept="image/*,audio/*" style="display: none;">
                    
                    <button type="button" id="chat-attach-button" class="btn btn-sm btn-light" title="Adjuntar archivo">
                        <i class="bi bi-paperclip"></i>
                    </button>
                    
                    <button type="submit" id="chat-send-button" class="btn btn-sm btn-light">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </form>
                <!-- <small class="form-text text-muted mt-1">Puedes adjuntar imágenes o audios.</small> -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <!-- Columna principal para el contenido de la lección -->
    <div class="col-md-12" id="lesson-content-col">
      <div class="card shadow-sm mb-4">
        <%- include('partials/_content-header', { title: lesson.title, showTTS: true, showLessonToggle: true }) %>
        <div class="card-body">
          <div class="lesson-content">
            <%- marked.parse(lesson.content || '') %>
          </div>
        </div>

        <div class="card-footer d-flex justify-content-between">
          <% if (previousLesson) { %>
            <a href="/courses/<%= lesson.course.slug || lesson.course.id %>/lessons/<%= previousLesson.id %>" class="btn btn-outline-secondary">
              <span data-feather="arrow-left" class="me-1"></span> Anterior Lección
            </a>
          <% } else { %>
            <button class="btn btn-outline-secondary" disabled><span data-feather="arrow-left" class="me-1"></span> Anterior Lección</button>
          <% } %>
          
          <% if (nextLesson) { %>
            <a href="/courses/<%= lesson.course.slug || lesson.course.id %>/lessons/<%= nextLesson.id %>" class="btn btn-primary">
              Siguiente Lección <span data-feather="arrow-right" class="ms-1"></span>
            </a>
          <% } else { %>
            <button class="btn btn-primary" disabled>Siguiente Lección <span data-feather="arrow-right" class="ms-1"></span></button>
          <% } %>
        </div>
      </div>

    </div>

    <!-- Columna lateral para la lista de lecciones del curso -->
    <div class="col-lg-4 d-none" id="lesson-list-col">
      <div class="card shadow-sm">
        <div class="card-header">
          <h5 class="mb-0">Lecciones en "<%= lesson.course.title %>"</h5>
        </div>
        <% if (lesson.course.lessons && lesson.course.lessons.length > 0) { %>
          <div class="list-group list-group-flush">
            <% lesson.course.lessons.forEach(item => { %>
              <a href="/courses/<%= lesson.course.id %>/lessons/<%= item.id %>"
                 class="list-group-item list-group-item-action <%= item.id === lesson.id ? 'active' : '' %>">
                <span data-feather="<%= item.id === lesson.id ? 'check-circle' : 'file-text' %>" class="me-2"></span>
                <%= item.title %>
              </a>
            <% }); %>
          </div>
        <% } else { %>
          <div class="card-body">
            <p class="text-muted">No hay más lecciones en este curso.</p>
          </div>
        <% } %>
      </div>
      <% if (user && user.role === 'ADMIN') { %>
        <div class="mt-3">
            <a href="/admin/courses/<%= lesson.course.id %>/lessons/<%= lesson.id %>/edit" class="btn btn-outline-secondary w-100">Editar Lección</a>
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Bloque de preparación de datos EJS para el chat -->
<% 
  const attrEscape = (text) => {
    if (typeof text !== 'string') return String(text); 
    return text.replace(/&/g, '&') 
               .replace(/"/g, '"')
               .replace(/'/g, '&#39;')
               .replace(/</g, '<')
               .replace(/>/g, '>');
  };

  let webhookUrlData = "";
  let courseTitleData = ""; // Para el template del mensaje inicial
  let lessonTitleData = ""; // Para el template del mensaje inicial
  let initialMessageTemplateData = '¡Hola! Soy tu asistente AI para el curso "{courseTitle}”. ¿En qué puedo ayudarte con la lección "{lessonTitle}"?';
  let userIdData = "";
  let userNameData = ""; // Para el data-attribute user-name
  let userAvatarUrlData = "";
  let courseIdData = "";
  let lessonIdData = "";
  let i18nInputPlaceholderData = "Escribe tu pregunta..."; 
  let i18nGetStartedData = "Nueva Conversación"; 
  let aiSystemPromptData = "";
  let userEmailForPrompt = "no-disponible"; // Para reemplazo en prompt (raw)
  let courseDescriptionForAttr = ""; 
  let lessonContentForAttr = "";     
  let courseRequirementsForAttr = "";
  let courseAdditionalMaterialForAttr = "";
  let i18nTitleForChatData = attrEscape("Asistente del Curso");
  let i18nSubtitleForChatData = attrEscape("Pregúntame sobre esta lección");

  if (lesson.course.n8nWebhookUrl) {
    webhookUrlData = attrEscape(lesson.course.n8nWebhookUrl || ""); 
    
    const rawCourseTitle = lesson.course.title || "Curso Actual";
    const rawLessonTitle = lesson.title || "Lección Actual";

    // Para data-attributes usados en el mensaje inicial del chat
    courseTitleData = attrEscape(rawCourseTitle); 
    lessonTitleData = attrEscape(rawLessonTitle);

    i18nTitleForChatData = attrEscape(`Asistente: ${rawCourseTitle}`);
    i18nSubtitleForChatData = attrEscape(rawLessonTitle);
    
    initialMessageTemplateData = attrEscape(initialMessageTemplateData);
    courseIdData = attrEscape(lesson.course.id || "");
    lessonIdData = attrEscape(lesson.id || "");

    if (typeof user !== 'undefined' && user) { 
      userIdData = attrEscape(user.id || "");
      userNameData = attrEscape(user.name || "Usuario"); 
      userAvatarUrlData = attrEscape(user.avatarUrl || "");
      if (user.email) {
        userEmailForPrompt = user.email; 
      }
    } else { 
      userIdData = "";
      userNameData = attrEscape("Invitado"); 
      userAvatarUrlData = "";
    }

    i18nInputPlaceholderData = attrEscape(i18nInputPlaceholderData); 
    i18nGetStartedData = attrEscape(i18nGetStartedData); 
    
    const rawUserNameForPromptReplace = (typeof user !== 'undefined' && user && user.name) ? user.name : "Invitado";
    const rawCourseTitleForPromptReplace = lesson.course.title || "este curso"; // Ya tenemos rawCourseTitle
    const rawLessonTitleForPromptReplace = lesson.title || "actual"; // Ya tenemos rawLessonTitle
    
    const rawCourseProgress = String(typeof courseProgressPercentage !== 'undefined' ? courseProgressPercentage : 0);
    const rawQuizAttempts = String(typeof quizAttemptsCount !== 'undefined' ? quizAttemptsCount : 0);
    const rawLastQuizScore = String(typeof lastQuizScoreValue !== 'undefined' ? lastQuizScoreValue : 0);

    let finalSystemPrompt = lesson.course.aiSystemPrompt || "";
    finalSystemPrompt = finalSystemPrompt.replace(/{{userName}}/g, rawUserNameForPromptReplace); 
    finalSystemPrompt = finalSystemPrompt.replace(/{{userEmail}}/g, userEmailForPrompt); 
    finalSystemPrompt = finalSystemPrompt.replace(/{{courseTitle}}/g, rawCourseTitleForPromptReplace);
    finalSystemPrompt = finalSystemPrompt.replace(/{{lessonTitle}}/g, rawLessonTitleForPromptReplace);
    finalSystemPrompt = finalSystemPrompt.replace(/{{courseProgress}}%/g, rawCourseProgress + '%');
    finalSystemPrompt = finalSystemPrompt.replace(/{{quizAttempts}}/g, rawQuizAttempts);
    finalSystemPrompt = finalSystemPrompt.replace(/{{lastQuizScore}}%/g, rawLastQuizScore + '%');
    
    aiSystemPromptData = attrEscape(finalSystemPrompt);

    courseDescriptionForAttr = attrEscape(lesson.course.description || "");
    // lessonContentForAttr = attrEscape(lesson.content || ""); // ELIMINADO: Posible causa del error de renderizado de HTML
    courseRequirementsForAttr = attrEscape(lesson.course.requirements || "");
    courseAdditionalMaterialForAttr = attrEscape(lesson.course.additionalMaterialInfo || "");
  }
%>


<style>
  /* .lesson-content img {
    max-width: 100%;
    height: auto;
    border-radius: 0.25rem;
  }
  .lesson-content pre {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 0.25rem;
    padding: 1rem;
    overflow-x: auto;
  }
  .lesson-content code {
    color: #d63384;
  }
  .lesson-content pre code {
    color: inherit; 
  } */

  #chat-messages-area .chat-message {
      padding: 8px;
      border-radius: 15px;
      max-width:60%;
      clear: both;
      /* margin-bottom: 0.5rem; */
  }
  #chat-messages-area .user-message {
      background-color: #0d6efd; 
      color: white;
      margin-left: auto;
      /* border-bottom-right-radius: 5px; */
  }
  #chat-messages-area .ai-message {
      background-color: #e9ecef;
      color: #212529;
      margin-right: auto; 
      /* border-bottom-left-radius: 5px; */
  }
  #chat-messages-area .chat-message p {
      /* margin-bottom: 0.25rem; */
      word-wrap: break-word; 
  }
  #chat-messages-area .chat-message img,
  #chat-messages-area .chat-message audio {
      max-width: 100%;
      border-radius: 10px;
      /* margin-top: 5px; */
  }
  #chat-messages-area .message-timestamp {
      font-size: 0.75em;
      display: block;
      text-align: right; 
      color: #d63384;
  }

  #chat-messages-area .ai-message .message-timestamp {
    font-size: 0.75em;
    display: block;
    text-align: left;
    color: #d63384;
  }
  #chat-file-preview-name {
    font-style: italic;
  }

  .tts-highlight {
    background-color: #ffec8a; /* Amarillo suave */
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    margin: -0.25rem -0.5rem; /* Compensar el padding para no afectar el layout */
    transition: background-color 0.3s ease-in-out;
  }

  /* Estilos para el chat en pantalla completa */
  .chat-fullscreen {
    position: fixed !important;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1050;
    margin: 0 !important;
    border-radius: 0 !important;
  }
  .chat-fullscreen .accordion-collapse {
    height: calc(100% - 58px) !important; /* 58px es la altura aprox del botón del acordeón */
    max-height: calc(100% - 58px) !important;
  }
  .chat-fullscreen .accordion-body {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  .chat-fullscreen #lesson-chat-container {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  .chat-fullscreen #chat-messages-area {
    flex-grow: 1;
    height: auto !important;
  }
</style>

<!-- Placeholder para el JavaScript del Chat a Medida -->
<script id="custom-chat-script">
  document.addEventListener('DOMContentLoaded', () => {
    const socket = io();

    const lessonId = document.getElementById('lesson-chat-container').dataset.lessonId;
    const userId = document.getElementById('lesson-chat-container').dataset.userId;
    const courseId = document.getElementById('lesson-chat-container').dataset.courseId;

    socket.emit('joinRoom', { lessonId });

    const fetchChatHistory = async () => {
      try {
        const response = await fetch(`/chat/history/${lessonId}`);
        const messages = await response.json();
        if (chatEmptyMessage && messages.length > 0) {
          chatEmptyMessage.style.display = 'none';
        }
        messages.forEach(message => {
          const messageDiv = document.createElement('div');
          messageDiv.classList.add('chat-message', message.userId === userId ? 'user-message' : 'ai-message', 'mb-2');
          
          // Parse markdown content
          const parsedContent = marked.parse(message.content || '');
          let messageHTML = `<div class="message-bubble">${parsedContent}`;
          
          // TODO: Handle file display
          messageHTML += `<small class="message-timestamp text-muted">${new Date(message.createdAt).toLocaleTimeString()}</small></div>`;
          messageDiv.innerHTML = messageHTML;
          
          // Highlight code blocks within the new message
          messageDiv.querySelectorAll('pre code').forEach((block) => {
            hljs.highlightElement(block);
          });

          chatMessagesArea.appendChild(messageDiv);
        });
        chatMessagesArea.scrollTop = chatMessagesArea.scrollHeight;
      } catch (error) {
        console.error('Error fetching chat history:', error);
      }
    };

    fetchChatHistory();

    const chatForm = document.getElementById('chat-form');
    const chatInputText = document.getElementById('chat-input-text');
    const chatAttachButton = document.getElementById('chat-attach-button');
    const chatInputFile = document.getElementById('chat-input-file');
    const chatMessagesArea = document.getElementById('chat-messages-area');
    const chatFilePreviewArea = document.getElementById('chat-file-preview-area');
    const chatFilePreviewName = document.getElementById('chat-file-preview-name');
    const chatRemoveFileButton = document.getElementById('chat-remove-file-button');
    const chatEmptyMessage = document.getElementById('chat-empty-message');

    // Ejemplo: Manejar clic en adjuntar archivo
    if (chatAttachButton && chatInputFile) {
      chatAttachButton.addEventListener('click', () => {
        chatInputFile.click();
      });
    }

    // Ejemplo: Manejar selección de archivo
    if (chatInputFile && chatFilePreviewArea && chatFilePreviewName) {
      chatInputFile.addEventListener('change', () => {
        if (chatInputFile.files.length > 0) {
          chatFilePreviewName.textContent = chatInputFile.files[0].name;
          chatFilePreviewArea.style.display = 'block';
        } else {
          chatFilePreviewArea.style.display = 'none';
        }
      });
    }
    
    // Ejemplo: Manejar quitar archivo adjunto
    if (chatRemoveFileButton && chatInputFile && chatFilePreviewArea) {
        chatRemoveFileButton.addEventListener('click', () => {
            chatInputFile.value = ''; // Limpiar el input de archivo
            chatFilePreviewArea.style.display = 'none';
            chatFilePreviewName.textContent = '';
        });
    }

    // Ejemplo: Manejar envío de formulario (solo UI por ahora)
    if (chatForm && chatInputText && chatMessagesArea) {
      // Listener para la tecla Enter en el textarea
      chatInputText.addEventListener('keydown', (e) => {
        // Si se presiona Enter pero no Shift, se envía el formulario.
        // Esto permite usar Shift+Enter para crear nuevas líneas.
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault(); // Prevenir el salto de línea por defecto
          chatForm.requestSubmit(); // Enviar el formulario
        }
      });

      chatForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const messageText = chatInputText.value.trim();
        const attachedFile = chatInputFile.files[0];

        if (messageText || attachedFile) {
          let fileUrl = null;
          let fileType = null;

          if (attachedFile) {
            const formData = new FormData();
            formData.append('file', attachedFile);

            try {
              const response = await fetch('/chat/upload', {
                method: 'POST',
                body: formData,
              });

              if (response.ok) {
                const result = await response.json();
                fileUrl = result.fileUrl;
                fileType = result.fileType;
              } else {
                console.error('File upload failed');
                return;
              }
            } catch (error) {
              console.error('Error uploading file:', error);
              return;
            }
          }

          const messageData = {
            content: messageText,
            userId,
            courseId,
            lessonId,
            fileUrl,
            fileType,
          };
          socket.emit('sendMessage', messageData);
          chatInputText.value = '';
          chatInputFile.value = '';
          chatFilePreviewArea.style.display = 'none';
          chatFilePreviewName.textContent = '';
        }
      });
    }

    socket.on('newMessage', (message) => {
      if (chatEmptyMessage) {
        chatEmptyMessage.style.display = 'none'; // Ocultar mensaje de historial vacío
      }
      const messageDiv = document.createElement('div');
      const isCurrentUser = message.userId === userId;
      messageDiv.classList.add('chat-message', isCurrentUser ? 'user-message' : 'ai-message', 'mb-2');
      
      // Parse markdown content
      const parsedContent = marked.parse(message.content || '');
      let messageHTML = `<div class="message-bubble">${parsedContent}`;

      if (message.fileUrl) {
        if (message.fileType.startsWith('image/')) {
          messageHTML += `<img src="${message.fileUrl}" alt="Imagen adjunta" class="img-fluid mt-2" style="max-height: 150px;">`;
        } else if (message.fileType.startsWith('audio/')) {
          messageHTML += `<audio controls src="${message.fileUrl}" class="mt-2"></audio>`;
        }
      }
      messageHTML += `<small class="message-timestamp text-muted">${new Date(message.createdAt).toLocaleTimeString()}</small></div>`;
      messageDiv.innerHTML = messageHTML;

      // Highlight code blocks within the new message
      messageDiv.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
      });

      chatMessagesArea.appendChild(messageDiv);
      chatMessagesArea.scrollTop = chatMessagesArea.scrollHeight;
    });
    // Asegurar que Feather Icons se reemplacen si se usan en los mensajes dinámicos (poco probable aquí)
    if (typeof feather !== 'undefined') {
        feather.replace();
    }

    // Lógica para el chat en pantalla completa
    const fullscreenBtn = document.getElementById('chat-fullscreen-btn');
    const fullscreenIcon = document.getElementById('chat-fullscreen-icon');
    const chatAccordion = document.getElementById('chatAccordion');
    
    if (fullscreenBtn && chatAccordion && fullscreenIcon) {
      fullscreenBtn.addEventListener('click', (e) => {
        e.stopPropagation(); // Evita que el acordeón se colapse/expanda
        
        document.body.style.overflow = chatAccordion.classList.contains('chat-fullscreen') ? 'auto' : 'hidden';
        chatAccordion.classList.toggle('chat-fullscreen');
        
        // Cambiar el ícono
        if (chatAccordion.classList.contains('chat-fullscreen')) {
          fullscreenIcon.classList.remove('bi-fullscreen');
          fullscreenIcon.classList.add('bi-fullscreen-exit');
          fullscreenBtn.setAttribute('title', 'Salir de Pantalla Completa');
        } else {
          fullscreenIcon.classList.remove('bi-fullscreen-exit');
          fullscreenIcon.classList.add('bi-fullscreen');
          fullscreenBtn.setAttribute('title', 'Pantalla Completa');
        }
      });
    }

    // Lógica para Ocultar/Mostrar la lista de lecciones
    const toggleBtn = document.getElementById('toggle-lessons-btn');
    const lessonCol = document.getElementById('lesson-content-col');
    const listCol = document.getElementById('lesson-list-col');

    if (toggleBtn && lessonCol && listCol) {
      toggleBtn.addEventListener('click', () => {
        listCol.classList.toggle('d-none');
        lessonCol.classList.toggle('col-md-8');
        lessonCol.classList.toggle('col-md-12');
      });
    }
  });
</script>

<%- include('partials/_tts-script', { contentSelector: '.lesson-content' }) %>
